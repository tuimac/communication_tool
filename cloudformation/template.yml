AWSTemplateFormatVersion: 2010-09-09
Description: Communication tool server for application development

Parameters:
  EC2LaunchType:
    Type: String
    Default: spot
    AllowedValues:
      - ondemand
      - spot
    Description: Choose value which EC2 launch type you want and fill in Default key.

  VpcCidr:
    Type: String
    Default: 10.0.0.0/27

  SubnetCidr:
    Type: String
    Default: 10.0.0.0/28

  IPAddr:
    Type: String
    Default: 10.0.0.4

  AMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  SSHPemFilename:
    Type: String
    Default: tuimac

  TagKey:
    Type: String
    Default: Name

  TagValue:
    Type: String
    Default: communication-tool

Conditions:
  IsEC2LaunchType:
    !Equals
      - !Ref EC2LaunchType
      - spot

Resources:
  # VPC
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
 
  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  # Subnet
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref SubnetCidr
      AvailabilityZone: ap-northeast-3a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  # RouteTable
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteTableAccociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet

  # Security Group
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref TagValue
      GroupDescription: for test
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: !Ref VpcCidr
          Description: ANY
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: ANY
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  # Endpoint
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument: '{
        "Version": "2012-10-17",
        "Statement":[{
          "Effect": "Allow",
          "Principal": "*",
          "Action": "*",
          "Resource": "*"
        }]
      }'
      RouteTableIds:
        - !Ref RouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref Vpc

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2InstanceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: EC2InstancePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:*"
                  - "s3:*"
                Resource:
                  - "*"
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2InstanceRole

  SpotFleetInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SpotFleetInstance
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - spotfleet.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue

  # EC2 Instance
  CommunicationServer:
    Type: AWS::EC2::Instance
    Properties:
      !If
        - IsEC2LaunchType
        - ImageId: !Ref AMIID
          InstanceType: m5.large
          NetworkInterfaces:
            - AssociatePublicIpAddress: true
              DeleteOnTermination: true
              Description: ENI
              GroupSet:
                - !Ref SecurityGroup
              SubnetId: !Ref Subnet
              DeviceIndex: 0
              PrivateIpAddress: !Ref IPAddr
          IamInstanceProfile: !Ref EC2InstanceProfile
          BlockDeviceMappings:
            - DeviceName: /dev/sda1
              Ebs:
                DeleteOnTermination: true
                Encrypted: true
                Iops: 3000
                VolumeSize: 10
                VolumeType: gp3
          SourceDestCheck: false
          KeyName: !Ref SSHPemFilename
          Tags:
            - Key: Name
              Value: comm-tool
          UserData:
            Fn::Base64: !Sub |
                #!/bin/bash
                LOG=/var/log/user-data.log
                touch $LOG
                exec >> $LOG 2>&1
                  yum update -y
                  yum install -y git docker vim*
                  mkdir -p /etc/vim/undo
                  mkdir -p /etc/vim/backup
                  rm /etc/vimrc
                  curl -L https://raw.githubusercontent.com/tuimac/tools/master/vim/vimrc -o /etc/vimrc
                  chmod -R 777 /etc/vim
                  echo 'if [ -n "$BASH_VERSION" -o -n "$KSH_VERSION" -o -n "$ZSH_VERSION" ]; then
                    [ -x /usr/bin/id ] || return
                    ID=`/usr/bin/id -u`
                    #[ -n "$ID" -a "$ID" -le 200 ] && return
                    # for bash and zsh, only if no alias is already set
                    alias vi >/dev/null 2>&1 || alias vi=vim
                  fi' > /etc/profile.d/vim.sh
                  systemctl enable docker
                  systemctl start docker
                  curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
                  usermod -aG docker ec2-user
                  cd /home/ec2-user
                  git clone https://github.com/tuimac/communication_tool; echo "cloned"
                  git clone https://github.com/tuimac/tools; echo "cloned"
                  chown -R ec2-user:ec2-user /home/ec2-user/communication_tool
                  chown -R ec2-user:ec2-user /home/ec2-user/tools
                  reboot
        - SpotFleetRequestConfigData:
            IamFleetRole: !GetAtt SpotFleetInstanceRole.Arn
            TerminateInstancesWithExpiration: false
            InstanceInterruptionBehavior: stop
            TargetCapacity: 1
            LaunchSpecifications:
              - BlockDeviceMappings:
                  - DeviceName: /dev/sda1
                    Ebs:
                      DeleteOnTermination: true
                      Encrypted: true
                      Iops: 3000
                      VolumeSize: 10
                      VolumeType: gp3
                IamInstanceProfile:
                  Arn: !GetAtt EC2InstanceProfile.Arn
                ImageId: !Ref AMIID
                InstanceType: m5.large
                Monitoring:
                  Enabled: false
                NetworkInterfaces:
                  - AssociatePublicIpAddress: true
                    DeleteOnTermination: true
                    Description: ContainerCLI Client Server
                    Groups:
                      - !Ref SecurityGroup
                    SubnetId: !Ref Subnet
                    DeviceIndex: 0
                    PrivateIpAddresses: 
                      - Primary: true
                        PrivateIpAddress: !Ref IPAddr
                IamInstanceProfile:
                  Arn: !GetAtt EC2InstanceProfile.Arn
                SpotPrice: 2
                KeyName: !Ref SSHPemFilename
                TagSpecifications:
                  - ResourceType: instance
                    Tags:
                      - Key: Name
                        Value: comm-tool
                UserData:
                  Fn::Base64: !Sub |
                      #!/bin/bash
                      LOG=/var/log/user-data.log
                      touch $LOG
                      exec >> $LOG 2>&1
                        yum update -y
                        yum install -y git docker vim*
                        mkdir -p /etc/vim/undo
                        mkdir -p /etc/vim/backup
                        rm /etc/vimrc
                        curl -L https://raw.githubusercontent.com/tuimac/tools/master/vim/vimrc -o /etc/vimrc
                        chmod -R 777 /etc/vim
                        echo 'if [ -n "$BASH_VERSION" -o -n "$KSH_VERSION" -o -n "$ZSH_VERSION" ]; then
                          [ -x /usr/bin/id ] || return
                          ID=`/usr/bin/id -u`
                          #[ -n "$ID" -a "$ID" -le 200 ] && return
                          # for bash and zsh, only if no alias is already set
                          alias vi >/dev/null 2>&1 || alias vi=vim
                        fi' > /etc/profile.d/vim.sh
                        systemctl enable docker
                        systemctl start docker
                        usermod -aG docker ec2-user
                        curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
                        cd /home/ec2-user
                        git clone https://github.com/tuimac/communication_tool; echo "cloned"
                        git clone https://github.com/tuimac/tools; echo "cloned"
                        chown -R ec2-user:ec2-user /home/ec2-user/communication_tool
                        chown -R ec2-user:ec2-user /home/ec2-user/tools
                        reboot
